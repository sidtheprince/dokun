	    static const char * vertex_source[] =
        //{"#version 330\n"};
	    {
		    "#version 330\n"
		    "\n"
            "\n"			
		    "layout(location = 0) in vec2 xy;\n"
		    "layout(location = 1) in vec2 tex_coord;\n"
		    "layout(location = 2) in vec2 normal;\n"
		    "\n"
		    "out vec2 Texcoord;\n"
		    "out vec2 Normal;  \n"
		    "\n"
		    "\n"
		    "uniform bool invert;\n" // 0 = top-left  1= bottom-left
		    "uniform mat4 modelview;\n"
		    "uniform mat4 proj;\n"
		    "uniform mat4 view;\n"
		    "uniform mat4 model;\n"
		    "uniform mat4 light_space;\n"
		    "\n"
		    "\n"
		    "void main(void)\n"
            "{\n"
		    "\n"
		    "\n"
		        "Normal      = normal;\n"
		        "Texcoord    = vec2(tex_coord.x, 1.0 - tex_coord.y);\n"         // if ortho is top-left corner	
		        "gl_Position = proj * view * model * vec4(xy, 0, 1);\n"
		    "}\n"
	    };
        vertex_shader.set_source(vertex_source);
	    vertex_shader.compile();
	// fragment_shader
		Shader fragment_shader;
	    fragment_shader.create(DOKUN_SHADER_FRAGMENT);
	    static const char * fragment_source[] =
	    //{"#version 330\n"};
	    {
		    "#version 330\n"
		    "out vec4 out_color;\n"
		    "uniform vec4 color;\n"
		    "in vec2 Texcoord;  \n"
		    "in vec2 Normal;    \n"
		    "\n"
		    "struct Texture {\n"
		        "sampler2D base;  \n" // same as diffuse
		        "sampler2D normal;\n"
		        "sampler2D shadow;\n"
		        "bool is_texture; \n"
				"int count;       \n" // to see if sprite has normal_map
		    "};\n"
		    "uniform Texture map;\n"
		    "\n"
			// SOBEL EDGE DETECTION //////////////////////////////////////////////
			"uniform vec2 resolution;\n"// TEMPORARY LINE (delete soon)
			"float threshold(in float thr1, in float thr2 , in float val) {\n"// TEMPORARY LINE (delete soon)
			    "if (val < thr1) {return 0.0;}\n"// TEMPORARY LINE (delete soon)
			    "if (val > thr2) {return 1.0;}\n"// TEMPORARY LINE (delete soon)
			    "return val;\n"// TEMPORARY LINE (delete soon)
			"}\n"// TEMPORARY LINE (delete soon)
			"float avg_intensity(in vec4 pix) {\n"// TEMPORARY LINE (delete soon)
			    " return (pix.r + pix.g + pix.b)/3.;\n"// TEMPORARY LINE (delete soon)
			"}\n"// TEMPORARY LINE (delete soon)
			"vec4 get_pixel(in vec2 coords, in float dx, in float dy) {\n"// TEMPORARY LINE (delete soon)
			    "return texture2D(map.base,coords + vec2(dx, dy));\n"// TEMPORARY LINE (delete soon)
			"}\n"// TEMPORARY LINE (delete soon)
			"float is_edge(in vec2 coords){\n"// TEMPORARY LINE (delete soon)
			"float dxtex = 1.0 / 32.0 /*image width*/;\n"// TEMPORARY LINE (delete soon)
			"float dytex = 1.0 / 32.0 /*image height*/;\n"// TEMPORARY LINE (delete soon)
			"float pix[9];\n"// TEMPORARY LINE (delete soon)
			"int k = -1;\n"// TEMPORARY LINE (delete soon)
			"float delta;\n"// TEMPORARY LINE (delete soon)
			"for (int i=-1; i<2; i++) {\n"// TEMPORARY LINE (delete soon)
			" for(int j=-1; j<2; j++) {\n"// TEMPORARY LINE (delete soon)
			"k++;\n"// TEMPORARY LINE (delete soon)
			"pix[k] = avg_intensity(get_pixel(coords,float(i)*dxtex,\n"// TEMPORARY LINE (delete soon)
            "     float(j)*dytex));\n"// TEMPORARY LINE (delete soon)
   			"}\n"// TEMPORARY LINE (delete soon)
  			"}\n"// TEMPORARY LINE (delete soon)

  // average color differences around neighboring pixels
  			"delta = (abs(pix[1]-pix[7])+\n"// TEMPORARY LINE (delete soon)
          			"abs(pix[5]-pix[3]) +\n"// TEMPORARY LINE (delete soon)
          			"abs(pix[0]-pix[8])+\n"// TEMPORARY LINE (delete soon)
          			"abs(pix[2]-pix[6])\n"// TEMPORARY LINE (delete soon)
           			")/4.;\n"// TEMPORARY LINE (delete soon)

  			"return threshold(0.25,0.4,clamp(1.8*delta,0.0,1.0));\n"// TEMPORARY LINE (delete soon)
			"}		\n"// TEMPORARY LINE (delete soon)
			"\n"// TEMPORARY LINE (delete soon) //////////////////////////////////////////
		    "struct Light {\n" // global light
			    "vec3 direction;     \n"
	    	    "vec4 position;      \n"
	    	    "vec4 ambient;       \n"
	    	    "vec4 diffuse;       \n"
	    	    "vec4 specular;      \n"
				"vec3 spot_direction;\n"
				"float spot_exponent;\n"
				"float spot_cutoff;  \n"
				"vec3 attenuation;   \n"				
		    "};\n"
		    "uniform Light light;\n"
		    "\n"
			"void main(void)\n"
            "{\n"		
		        "\n"
		        "\n"
		        "vec4 normal_map = texture(map.normal, Texcoord);\n"
		        "\n"
			    "if(map.is_texture == true){\n"
			        "out_color = color * texture(map.base, Texcoord);\n"
					/*
					"vec4 color1 = vec4(0, 0, 0,color.a);\n"//"out_color = color * vec4(edge, texture(map.base, Texcoord).a);\n"//"out_color = color * texture(map.base, Texcoord);\n"
				    "color1.g    = is_edge(Texcoord.xy );\n" // temp
				    "out_color   = color1 * texture(map.base, Texcoord);\n" // temp
					*/
				"}"
				"if(map.is_texture == false)\n" // texture data is empty, use color ONLY
				"{"    
					"out_color = color;\n"
				"}"
		    "}\n"			
		};